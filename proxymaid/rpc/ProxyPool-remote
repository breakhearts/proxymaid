#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from rpc import ProxyPool
from rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void spot_proxy(string ip, i32 port, string country)')
  print('  bool has_proxy(string proxy_url)')
  print('  string req_proxy(string url)')
  print('  void free_proxy(string proxy_url, double latency)')
  print('  string req_proxy_for_validate()')
  print('  void update_proxy_status(string proxy_url, bool is_valid)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ProxyPool.Client(protocol)
transport.open()

if cmd == 'spot_proxy':
  if len(args) != 3:
    print('spot_proxy requires 3 args')
    sys.exit(1)
  pp.pprint(client.spot_proxy(args[0],eval(args[1]),args[2],))

elif cmd == 'has_proxy':
  if len(args) != 1:
    print('has_proxy requires 1 args')
    sys.exit(1)
  pp.pprint(client.has_proxy(args[0],))

elif cmd == 'req_proxy':
  if len(args) != 1:
    print('req_proxy requires 1 args')
    sys.exit(1)
  pp.pprint(client.req_proxy(args[0],))

elif cmd == 'free_proxy':
  if len(args) != 2:
    print('free_proxy requires 2 args')
    sys.exit(1)
  pp.pprint(client.free_proxy(args[0],eval(args[1]),))

elif cmd == 'req_proxy_for_validate':
  if len(args) != 0:
    print('req_proxy_for_validate requires 0 args')
    sys.exit(1)
  pp.pprint(client.req_proxy_for_validate())

elif cmd == 'update_proxy_status':
  if len(args) != 2:
    print('update_proxy_status requires 2 args')
    sys.exit(1)
  pp.pprint(client.update_proxy_status(args[0],eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
